[{"name":"Ui","comment":"\n\n\n# Getting started\n\n@docs layout, embed, Option\n\n\n# Basic Elements\n\n@docs Element, none, text, el\n\n\n# Rows and Columns\n\nWhen we want more than one child on an element, we want to be _specific_ about how they will be laid out.\n\nSo, the common ways to do that would be `row` and `column`.\n\n@docs row, column\n\n\n# Text Layout\n\n@docs ellipsis, paragraph, textColumn\n\n\n# Attributes\n\n@docs id, noAttr\n\n\n# Size\n\n@docs Attribute, Length, px, fill, portion\n\n@docs width, widthMin, widthMax\n\n@docs height, heightMin, heightMax\n\n\n# Debugging\n\n@docs explain\n\n\n# Padding and Spacing\n\nThere's no concept of margin in `elm-ui`, instead we have padding and spacing.\n\nPadding is the distance between the outer edge and the content, and spacing is the space between children.\n\nSo, if we have the following row, with some padding and spacing.\n\n    Ui.row [ padding 10, spacing 7 ]\n        [ Ui.el [] Ui.none\n        , Ui.el [] Ui.none\n        , Ui.el [] Ui.none\n        ]\n\nHere's what we can expect:\n\n![Three boxes spaced 7 pixels apart. There's a 10 pixel distance from the edge of the parent to the boxes.](https://mdgriffith.gitbooks.io/style-elements/content/assets/spacing-400.png)\n\n**Note** `spacing` set on a `paragraph`, will set the pixel spacing between lines.\n\n@docs padding, paddingXY, paddingEach\n\n@docs spacing, spacingXY, spaceEvenly\n\n\n# Alignment\n\nAlignment can be used to align an `Element` within another `Element`.\n\n    Ui.el [ centerX, alignTop ] (text \"I'm centered and aligned top!\")\n\nIf alignment is set on elements in a layout such as a `row`, then the element will push the other elements in that direction. Here's an example.\n\n    Ui.row []\n        [ Ui.el [] Ui.none\n        , Ui.el [ alignLeft ] Ui.none\n        , Ui.el [ centerX ] Ui.none\n        , Ui.el [ alignRight ] Ui.none\n        ]\n\nwill result in a layout like\n\n    |-|-|    |-|    |-|\n\nWhere there are two elements on the left, one on the right, and one in the center of the space between the elements on the left and right.\n\n**Note** For text alignment, check out `Ui.Font`!\n\n@docs centerX, centerY, alignLeft, alignRight, alignTop, alignBottom\n\n\n# Transparency\n\n@docs opacity\n\n\n# Borders\n\n@docs border, borderWith, borderGradient\n\n@docs rounded, roundedWith, circle\n\n\n# Backgrounds\n\n@docs background, Gradient, backgroundGradient\n\n\n# Cursors\n\n@docs pointer, grab, grabbing\n\n\n# Adjustment\n\n@docs moveUp, moveDown, moveRight, moveLeft, rotate, scale\n\n\n# Viewports\n\nFor scrolling element, we're going to borrow some terminology from 3D graphics just like the Elm [Browser](https://package.elm-lang.org/packages/elm/browser/latest/Browser-Dom) package does.\n\nEssentially a `scrollable` is the window that you're looking through. If the content is larger than the scrollable, then scrollbars will appear.\n\n@docs scrollable, clipped\n\n\n# Links\n\n@docs link, linkNewTab, download\n\n\n# Images\n\n@docs image\n\n\n# Color\n\nIn order to use attributes like `Font.color` and `Background.color`, you'll need to make some colors!\n\n@docs Color, rgb\n\n\n# Nearby Elements\n\nLet's say we want a dropdown menu. Essentially we want to say: _put this element below this other element, but don't affect the layout when you do_.\n\n    Ui.row []\n        [ Ui.el\n            [ Ui.below (Ui.text \"I'm below!\")\n            ]\n            (Ui.text \"I'm normal!\")\n        ]\n\nThis will result in\n/---------------\n|- I'm normal! -|\n---------------/\nI'm below\n\nWhere `\"I'm Below\"` doesn't change the size of `Ui.row`.\n\nThis is very useful for things like dropdown menus or tooltips.\n\n@docs above, below, onRight, onLeft, inFront, behindContent\n\n\n# Angles\n\n@docs Angle, up, down, right, left\n\n@docs turns, radians\n\n\n# Mapping\n\n@docs map\n\n\n# Compatibility\n\n@docs html, htmlAttribute\n\n","unions":[{"name":"Length","comment":" ","args":[],"cases":[]}],"aliases":[{"name":"Angle","comment":" ","args":[],"type":"Internal.Style2.Angle"},{"name":"Attribute","comment":" An attribute that can be attached to an `Element`\n","args":["msg"],"type":"Internal.Model2.Attribute msg"},{"name":"Color","comment":" ","args":[],"type":"Internal.Style2.Color"},{"name":"Element","comment":" The basic building block of your layout.\n\n    howdy : Element msg\n    howdy =\n        Ui.el [] (Ui.text \"Howdy!\")\n\n","args":["msg"],"type":"Internal.Model2.Element msg"},{"name":"Gradient","comment":" ","args":[],"type":"Internal.Style2.Gradient"},{"name":"Option","comment":" ","args":[],"type":"Internal.Model2.Option"}],"values":[{"name":"above","comment":" ","type":"Ui.Element msg -> Ui.Attribute msg"},{"name":"alignBottom","comment":" ","type":"Ui.Attribute msg"},{"name":"alignLeft","comment":" ","type":"Ui.Attribute msg"},{"name":"alignRight","comment":" ","type":"Ui.Attribute msg"},{"name":"alignTop","comment":" ","type":"Ui.Attribute msg"},{"name":"background","comment":" ","type":"Ui.Color -> Ui.Attribute msg"},{"name":"backgroundGradient","comment":" ","type":"List.List Ui.Gradient -> Ui.Attribute msg"},{"name":"behindContent","comment":" This will place an element between the background and the content of an Ui.\n","type":"Ui.Element msg -> Ui.Attribute msg"},{"name":"below","comment":" ","type":"Ui.Element msg -> Ui.Attribute msg"},{"name":"border","comment":" ","type":"{ width : Basics.Int, color : Ui.Color } -> Ui.Attribute msg"},{"name":"borderGradient","comment":" ","type":"{ width : Basics.Int, gradient : Ui.Gradient, background : Ui.Gradient } -> Ui.Attribute msg"},{"name":"borderWith","comment":" ","type":"{ width : { bottom : Basics.Int, left : Basics.Int, right : Basics.Int, top : Basics.Int }, color : Ui.Color } -> Ui.Attribute msg"},{"name":"centerX","comment":" ","type":"Ui.Attribute msg"},{"name":"centerY","comment":" ","type":"Ui.Attribute msg"},{"name":"circle","comment":" ","type":"Ui.Attribute msg"},{"name":"clipped","comment":" Clip the content if it overflows.\n\nSimilar to `scrollable`, this element will fill the space it's given.\n\nIf the content overflows this element, it will be clipped.\n\n","type":"List.List (Ui.Attribute msg) -> Ui.Element msg -> Ui.Element msg"},{"name":"column","comment":" ","type":"List.List (Ui.Attribute msg) -> List.List (Ui.Element msg) -> Ui.Element msg"},{"name":"down","comment":" ","type":"Ui.Angle"},{"name":"download","comment":" A link to download a file.\n\nYou can optionally supply a filename you would like the file downloaded as.\n\nIf no filename is provided, whatever the server says the filename should be will be used.\n\n","type":"{ url : String.String, filename : Maybe.Maybe String.String } -> Ui.Attribute msg"},{"name":"el","comment":" The basic building block of your layout.\n\nYou can think of an `el` as a `div`, but it can only have one child.\n\nIf you want multiple children, you'll need to use something like `row` or `column`\n\n    import Element exposing (Element, rgb)\n    import Ui.Background as Background\n    import Ui.Border as Border\n\n    myElement : Element msg\n    myElement =\n        Ui.el\n            [ Background.color (rgb 0 0.5 0)\n            , Border.color (rgb 0 0.7 0)\n            ]\n            (Ui.text \"You've made a stylish element!\")\n\n","type":"List.List (Ui.Attribute msg) -> Ui.Element msg -> Ui.Element msg"},{"name":"ellipsis","comment":" ","type":"Ui.Attribute msg"},{"name":"embed","comment":" Converts an `Element msg` to an `Html msg` but does not include the stylesheet.\n\nYou'll need to include it manually yourself\n\n","type":"List.List (Ui.Attribute msg) -> Ui.Element msg -> Html.Html msg"},{"name":"explain","comment":" Highlight the borders of an element and it's children below. This can really help if you're running into some issue with your layout!\n\n**Note** This attribute needs to be handed `Debug.todo` in order to work, even though it won't do anything with it. This is a safety measure so you don't accidently ship code with `explain` in it, as Elm won't compile with `--optimize` if you still have a `Debug` statement in your code.\n\n    el\n        [ Ui.explain Debug.todo\n        ]\n        (text \"Help, I'm being debugged!\")\n\n","type":"Ui.Todo -> Ui.Attribute msg"},{"name":"fill","comment":" Fill the available space. The available space will be split evenly between elements that have `width fill`.\n","type":"Ui.Length"},{"name":"grab","comment":" ","type":"Ui.Attribute msg"},{"name":"grabbing","comment":" ","type":"Ui.Attribute msg"},{"name":"height","comment":" ","type":"Ui.Length -> Ui.Attribute msg"},{"name":"heightMax","comment":" ","type":"Basics.Int -> Ui.Attribute msg"},{"name":"heightMin","comment":" ","type":"Basics.Int -> Ui.Attribute msg"},{"name":"html","comment":" ","type":"Html.Html msg -> Ui.Element msg"},{"name":"htmlAttribute","comment":" ","type":"Html.Attribute msg -> Ui.Attribute msg"},{"name":"id","comment":" ","type":"String.String -> Ui.Attribute msg"},{"name":"image","comment":" Both a source and a description are required for images.\n\nThe description is used for people using screen readers.\n\nLeaving the description blank will cause the image to be ignored by assistive technology. This can make sense for images that are purely decorative and add no additional information.\n\nSo, take a moment to describe your image as you would to someone who has a harder time seeing.\n\n","type":"List.List (Ui.Attribute msg) -> { source : String.String, description : String.String } -> Ui.Element msg"},{"name":"inFront","comment":" This will place an element in front of another.\n\n**Note:** If you use this on a `layout` element, it will place the element as fixed to the scrollable which can be useful for modals and overlays.\n\n","type":"Ui.Element msg -> Ui.Attribute msg"},{"name":"layout","comment":" This is your top level node where you can turn `Element` into `Html`.\n","type":"List.List (Ui.Attribute msg) -> Ui.Element msg -> Html.Html msg"},{"name":"left","comment":" ","type":"Ui.Angle"},{"name":"link","comment":"\n\n    el\n        [ link \"http://fruits.com\" ]\n        (text \"A link to my favorite fruit provider.\")\n\n","type":"String.String -> Ui.Attribute msg"},{"name":"linkNewTab","comment":" ","type":"String.String -> Ui.Attribute msg"},{"name":"map","comment":" ","type":"(msg -> msg1) -> Ui.Element msg -> Ui.Element msg1"},{"name":"moveDown","comment":" ","type":"Basics.Float -> Ui.Attribute msg"},{"name":"moveLeft","comment":" ","type":"Basics.Float -> Ui.Attribute msg"},{"name":"moveRight","comment":" ","type":"Basics.Float -> Ui.Attribute msg"},{"name":"moveUp","comment":" ","type":"Basics.Float -> Ui.Attribute msg"},{"name":"noAttr","comment":" ","type":"Ui.Attribute msg"},{"name":"none","comment":" When you want to render exactly nothing.\n","type":"Ui.Element msg"},{"name":"onLeft","comment":" ","type":"Ui.Element msg -> Ui.Attribute msg"},{"name":"onRight","comment":" ","type":"Ui.Element msg -> Ui.Attribute msg"},{"name":"opacity","comment":" ","type":"Basics.Float -> Ui.Attribute msg"},{"name":"padding","comment":" ","type":"Basics.Int -> Ui.Attribute msg"},{"name":"paddingEach","comment":" If you find yourself defining unique paddings all the time, you might consider defining\n\n    edges =\n        { top = 0\n        , right = 0\n        , bottom = 0\n        , left = 0\n        }\n\nAnd then just do\n\n    paddingEach { edges | right = 5 }\n\n","type":"{ top : Basics.Int, right : Basics.Int, bottom : Basics.Int, left : Basics.Int } -> Ui.Attribute msg"},{"name":"paddingXY","comment":" Set horizontal and vertical padding.\n","type":"Basics.Int -> Basics.Int -> Ui.Attribute msg"},{"name":"paragraph","comment":" A paragraph will layout all children as wrapped, inline elements.\n\n    import Element exposing (el, paragraph, text)\n    import Ui.Font as Font\n\n    view =\n        paragraph []\n            [ text \"lots of text ....\"\n            , el [ Font.bold ] (text \"this is bold\")\n            , text \"lots of text ....\"\n            ]\n\nThis is really useful when you want to markup text by having some parts be bold, or some be links, or whatever you so desire.\n\nAlso, if a child element has `alignLeft` or `alignRight`, then it will be moved to that side and the text will flow around it, (ah yes, `float` behavior).\n\nThis makes it particularly easy to do something like a [dropped capital](https://en.wikipedia.org/wiki/Initial).\n\n    import Element exposing (alignLeft, el, padding, paragraph, text)\n    import Ui.Font as Font\n\n    view =\n        paragraph []\n            [ el\n                [ alignLeft\n                , padding 5\n                ]\n                (text \"S\")\n            , text \"o much text ....\"\n            ]\n\nWhich will look something like\n\n![A paragraph where the first letter is twice the height of the others](https://mdgriffith.gitbooks.io/style-elements/content/assets/Screen%20Shot%202017-08-25%20at%209.41.52%20PM.png)\n\n**Note** `spacing` on a paragraph will set the pixel spacing between lines.\n\n","type":"List.List (Ui.Attribute msg) -> List.List (Ui.Element msg) -> Ui.Element msg"},{"name":"pointer","comment":" Set the cursor to be a pointing hand when it's hovering over this Ui.\n","type":"Ui.Attribute msg"},{"name":"portion","comment":" Sometimes you may not want to split available space evenly. In this case you can use `portion` to define which elements should have what portion of the available space.\n\nSo, two elements, one with `width (portion 2)` and one with `width (portion 3)`. The first would get 2 portions of the available space, while the second would get 3.\n\n**Also:** `fill == portion 1`\n\n","type":"Basics.Int -> Ui.Length"},{"name":"px","comment":" ","type":"Basics.Int -> Ui.Length"},{"name":"radians","comment":" ","type":"Basics.Float -> Ui.Angle"},{"name":"rgb","comment":" Provide the red, green, and blue channels for the color.\n\nEach channel takes a value between 0 and 255.\n\n","type":"Basics.Int -> Basics.Int -> Basics.Int -> Ui.Color"},{"name":"right","comment":" ","type":"Ui.Angle"},{"name":"rotate","comment":" Angle is given in radians. [Here are some conversion functions if you want to use another unit.](https://package.elm-lang.org/packages/elm/core/latest/Basics#degrees)\n","type":"Basics.Float -> Ui.Attribute msg"},{"name":"rounded","comment":" ","type":"Basics.Int -> Ui.Attribute msg"},{"name":"roundedWith","comment":" ","type":"{ topLeft : Basics.Int, topRight : Basics.Int, bottomLeft : Basics.Int, bottomRight : Basics.Int } -> Ui.Attribute msg"},{"name":"row","comment":" ","type":"List.List (Ui.Attribute msg) -> List.List (Ui.Element msg) -> Ui.Element msg"},{"name":"scale","comment":" ","type":"Basics.Float -> Ui.Attribute msg"},{"name":"scrollable","comment":" ","type":"List.List (Ui.Attribute msg) -> Ui.Element msg -> Ui.Element msg"},{"name":"spaceEvenly","comment":" ","type":"Ui.Attribute msg"},{"name":"spacing","comment":" ","type":"Basics.Int -> Ui.Attribute msg"},{"name":"spacingXY","comment":" In the majority of cases you'll just need to use `spacing`, which will work as intended.\n\nHowever for some layouts, like `textColumn`, you may want to set a different spacing for the x axis compared to the y axis.\n\n","type":"Basics.Int -> Basics.Int -> Ui.Attribute msg"},{"name":"text","comment":" Create some plain text.\n\n    text \"Hello, you stylish developer!\"\n\n**Note** text does not wrap by default. In order to get text to wrap, check out `paragraph`!\n\n","type":"String.String -> Ui.Element msg"},{"name":"textColumn","comment":" Now that we have a paragraph, we need some way to attach a bunch of paragraph's together.\n\nTo do that we can use a `textColumn`.\n\nThe main difference between a `column` and a `textColumn` is that `textColumn` will flow the text around elements that have `alignRight` or `alignLeft`, just like we just saw with paragraph.\n\nIn the following example, we have a `textColumn` where one child has `alignLeft`.\n\n    Ui.textColumn [ spacing 10, padding 10 ]\n        [ paragraph [] [ text \"lots of text ....\" ]\n        , el [ alignLeft ] none\n        , paragraph [] [ text \"lots of text ....\" ]\n        ]\n\nWhich will result in something like:\n\n![A text layout where an image is on the left.](https://mdgriffith.gitbooks.io/style-elements/content/assets/Screen%20Shot%202017-08-25%20at%208.42.39%20PM.png)\n\n","type":"List.List (Ui.Attribute msg) -> List.List (Ui.Element msg) -> Ui.Element msg"},{"name":"turns","comment":" ","type":"Basics.Float -> Ui.Angle"},{"name":"up","comment":" ","type":"Ui.Angle"},{"name":"width","comment":" ","type":"Ui.Length -> Ui.Attribute msg"},{"name":"widthMax","comment":" ","type":"Basics.Int -> Ui.Attribute msg"},{"name":"widthMin","comment":" ","type":"Basics.Int -> Ui.Attribute msg"}],"binops":[]},{"name":"Ui.Accessibility","comment":" This module is meant to make accessibility easy!\n\nThese are sign posts that accessibility software like screen readers can use to navigate your app.\n\nAll you have to do is add them to elements in your app where you see fit.\n\nHere's an example of annotating your navigation region:\n\n    import Element exposing (row)\n    import Ui.Accessibility\n\n    myNavigation =\n        row [ Ui.Accessibility.navigation ]\n            [-- ..your navigation links\n            ]\n\n@docs mainContent, info\n\n@docs navigation, heading, aside\n\n@docs description\n\n@docs announce, announceUrgently\n\n","unions":[],"aliases":[],"values":[{"name":"announce","comment":" Screen readers will announce when changes to this element are made.\n","type":"Ui.Attribute msg"},{"name":"announceUrgently","comment":" Screen readers will announce changes to this element and potentially interrupt any other announcement.\n","type":"Ui.Attribute msg"},{"name":"aside","comment":" ","type":"Ui.Attribute msg"},{"name":"description","comment":" Adds an `aria-label`, which is used by accessibility software to identity otherwise unlabeled elements.\n\nA common use for this would be to label buttons that only have an icon.\n\n","type":"String.String -> Ui.Attribute msg"},{"name":"heading","comment":" This will mark an element as `h1`, `h2`, etc where possible.\n\nThough it's also smart enough to not conflict with existing nodes.\n\nSo, this code\n\n    el\n        [ Region.heading 1\n        , link \"http://fruits.com\"\n        ]\n        (text \"Best site ever\")\n\nwill generate\n\n    <a href=\"http://fruits.com\">\n        <h1>Best site ever</h1>\n    </a>\n\n","type":"Basics.Int -> Ui.Attribute msg"},{"name":"info","comment":" This region is meant to communicate common information on all pages such as copyright information, and privacy statements.\n\nThis is very commonly the footer of the page.\n\n**Note** - You should only have _one_ of these on a given page.\n\n","type":"Ui.Attribute msg"},{"name":"mainContent","comment":" **Note** - You should only have _one_ of these on a given page.\n","type":"Ui.Attribute msg"},{"name":"navigation","comment":" ","type":"Ui.Attribute msg"}],"binops":[]},{"name":"Ui.Anim","comment":"\n\n\n# Getting set up\n\n@docs layout\n\n@docs init, Msg, update, State\n\n@docs Animator, updateWith, subscription, watching\n\n\n# Animations\n\n@docs Animated\n\n@docs Duration, ms\n\n@docs transition, hovered, focused, pressed\n\n\n# Properties\n\n@docs opacity, x, y, rotation, scale, scaleX, scaleY\n\n-- @docs padding, paddingEach, background, border, font, height, width\n\n-- # Premade animations\n\n-- Here are some premade animations.\n\n-- There's nothing special about them, they're just convenient!\n\n-- Check out how they're defined if you want to make your own.\n\n-- @docs spinning, pulsing, bouncing, pinging\n\n\n# Using Timelines\n\n@docs keyframes, hoveredWith, focusedWith, pressedWith\n\n@docs set, wait, step\n\n@docs loop, loopFor\n\n\n# Using Timelines\n\n@docs onTimeline, onTimelineWith\n\n\n# Persistent Elements\n\n@docs persistent\n\n\n# Mapping\n\n@docs mapAttribute\n\n","unions":[],"aliases":[{"name":"Animated","comment":" ","args":[],"type":"Animator.Attribute"},{"name":"Animator","comment":" ","args":["msg","model"],"type":"Internal.Model2.Animator msg model"},{"name":"Duration","comment":" ","args":[],"type":"Animator.Duration"},{"name":"Msg","comment":" ","args":[],"type":"Internal.Model2.Msg"},{"name":"State","comment":" ","args":[],"type":"Internal.Model2.State"}],"values":[{"name":"focused","comment":" ","type":"Ui.Anim.Duration -> List.List Ui.Anim.Animated -> Ui.Attribute msg"},{"name":"focusedWith","comment":" ","type":"List.List Ui.Anim.Step -> Ui.Attribute msg"},{"name":"hovered","comment":" ","type":"Ui.Anim.Duration -> List.List Ui.Anim.Animated -> Ui.Attribute msg"},{"name":"hoveredWith","comment":" ","type":"List.List Ui.Anim.Step -> Ui.Attribute msg"},{"name":"init","comment":" ","type":"Ui.Anim.State"},{"name":"keyframes","comment":" ","type":"List.List Ui.Anim.Step -> Ui.Attribute msg"},{"name":"layout","comment":" ","type":"{ options : List.List Ui.Option, toMsg : Ui.Anim.Msg -> msg, breakpoints : Maybe.Maybe (Ui.Responsive.Breakpoints label) } -> Ui.Anim.State -> List.List (Ui.Attribute msg) -> Ui.Element msg -> Html.Html msg"},{"name":"loop","comment":" ","type":"List.List Ui.Anim.Step -> Ui.Anim.Step"},{"name":"loopFor","comment":" ","type":"Basics.Int -> List.List Ui.Anim.Step -> Ui.Anim.Step"},{"name":"mapAttribute","comment":" ","type":"(msg -> msg2) -> Ui.Attribute msg -> Ui.Attribute msg2"},{"name":"ms","comment":" ","type":"Basics.Float -> Ui.Anim.Duration"},{"name":"onTimeline","comment":" ","type":"Animator.Timeline.Timeline state -> (state -> List.List Ui.Anim.Animated) -> Ui.Attribute msg"},{"name":"onTimelineWith","comment":" ","type":"Animator.Timeline.Timeline state -> (state -> ( List.List Ui.Anim.Animated, List.List Ui.Anim.Step )) -> Ui.Attribute msg"},{"name":"opacity","comment":" ","type":"Basics.Float -> Ui.Anim.Animated"},{"name":"persistent","comment":" ","type":"String.String -> String.String -> Ui.Attribute msg"},{"name":"pressed","comment":" ","type":"Ui.Anim.Duration -> List.List Ui.Anim.Animated -> Ui.Attribute msg"},{"name":"pressedWith","comment":" ","type":"List.List Ui.Anim.Step -> Ui.Attribute msg"},{"name":"rotation","comment":" ","type":"Basics.Float -> Ui.Anim.Animated"},{"name":"scale","comment":" ","type":"Basics.Float -> Ui.Anim.Animated"},{"name":"scaleX","comment":" ","type":"Basics.Float -> Ui.Anim.Animated"},{"name":"scaleY","comment":" ","type":"Basics.Float -> Ui.Anim.Animated"},{"name":"set","comment":" ","type":"List.List Ui.Anim.Animated -> Ui.Anim.Step"},{"name":"step","comment":" ","type":"Ui.Anim.Duration -> List.List Ui.Anim.Animated -> Ui.Anim.Step"},{"name":"subscription","comment":" ","type":"(Ui.Anim.Msg -> msg) -> Ui.Anim.State -> Ui.Anim.Animator msg model -> model -> Platform.Sub.Sub msg"},{"name":"transition","comment":" ","type":"Ui.Anim.Duration -> List.List Ui.Anim.Animated -> Ui.Attribute msg"},{"name":"update","comment":" ","type":"(Ui.Anim.Msg -> msg) -> Ui.Anim.Msg -> Ui.Anim.State -> ( Ui.Anim.State, Platform.Cmd.Cmd msg )"},{"name":"updateWith","comment":" ","type":"(Ui.Anim.Msg -> msg) -> Ui.Anim.Msg -> Ui.Anim.State -> { ui : Ui.Anim.State -> model, timelines : Ui.Anim.Animator msg model } -> ( model, Platform.Cmd.Cmd msg )"},{"name":"wait","comment":" ","type":"Ui.Anim.Duration -> Ui.Anim.Step"},{"name":"watching","comment":" ","type":"{ get : model -> Animator.Timeline.Timeline state, set : Animator.Timeline.Timeline state -> model -> model, onStateChange : state -> Maybe.Maybe msg } -> Ui.Anim.Animator msg model -> Ui.Anim.Animator msg model"},{"name":"x","comment":" ","type":"Basics.Float -> Ui.Anim.Animated"},{"name":"y","comment":" ","type":"Basics.Float -> Ui.Anim.Animated"}],"binops":[]},{"name":"Ui.Events","comment":"\n\n\n# Mouse\n\n@docs onClick\n\n@docs onDoubleClick, onMouseDown, onMouseUp, onMouseEnter, onMouseLeave, onMouseMove\n\n\n# Focus\n\n@docs onFocus, onLoseFocus\n\n\n# Keyboard\n\n@docs onKey, onKeyWith\n\n@docs Key, enter, space, up, down, left, right, backspace, key\n\n\n# Custom\n\n@docs on, stopPropagationOn, preventDefaultOn, custom\n\n","unions":[{"name":"Key","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"backspace","comment":" ","type":"Ui.Events.Key"},{"name":"custom","comment":" ","type":"String.String -> Json.Decode.Decoder { message : msg, stopPropagation : Basics.Bool, preventDefault : Basics.Bool } -> Ui.Attribute msg"},{"name":"down","comment":" ","type":"Ui.Events.Key"},{"name":"enter","comment":" ","type":"Ui.Events.Key"},{"name":"key","comment":" ","type":"String.String -> Ui.Events.Key"},{"name":"left","comment":" ","type":"Ui.Events.Key"},{"name":"on","comment":" ","type":"String.String -> Json.Decode.Decoder msg -> Ui.Attribute msg"},{"name":"onClick","comment":" ","type":"msg -> Ui.Attribute msg"},{"name":"onDoubleClick","comment":" ","type":"msg -> Ui.Attribute msg"},{"name":"onFocus","comment":" ","type":"msg -> Ui.Attribute msg"},{"name":"onKey","comment":" ","type":"Ui.Events.Key -> msg -> Ui.Attribute msg"},{"name":"onKeyWith","comment":" ","type":"({ key : Ui.Events.Key, ctrl : Basics.Bool, alt : Basics.Bool, shift : Basics.Bool, meta : Basics.Bool } -> Maybe.Maybe msg) -> Ui.Attribute msg"},{"name":"onLoseFocus","comment":" ","type":"msg -> Ui.Attribute msg"},{"name":"onMouseDown","comment":" ","type":"msg -> Ui.Attribute msg"},{"name":"onMouseEnter","comment":" ","type":"msg -> Ui.Attribute msg"},{"name":"onMouseLeave","comment":" ","type":"msg -> Ui.Attribute msg"},{"name":"onMouseMove","comment":" ","type":"msg -> Ui.Attribute msg"},{"name":"onMouseUp","comment":" ","type":"msg -> Ui.Attribute msg"},{"name":"preventDefaultOn","comment":" ","type":"String.String -> Json.Decode.Decoder ( msg, Basics.Bool ) -> Ui.Attribute msg"},{"name":"right","comment":" ","type":"Ui.Events.Key"},{"name":"space","comment":" ","type":"Ui.Events.Key"},{"name":"stopPropagationOn","comment":" ","type":"String.String -> Json.Decode.Decoder ( msg, Basics.Bool ) -> Ui.Attribute msg"},{"name":"up","comment":" ","type":"Ui.Events.Key"}],"binops":[]},{"name":"Ui.Font","comment":"\n\n@docs size, color, gradient\n\n\n## Typefaces\n\n@docs Font\n\n@docs family, typeface, serif, sansSerif, monospace\n\n\n## Alignment and Spacing\n\n@docs alignLeft, alignRight, center, justify\n\n@docs exactWhitespace\n\n@docs lineHeight, letterSpacing, wordSpacing\n\n\n## Font\n\n@docs font\n\n@docs fontAdjustment\n\n\n## Font Styles\n\n@docs underline, strike, italic\n\n\n## Font Weight\n\n@docs weight\n\n@docs Weight, heavy, extraBold, bold, semiBold, medium, regular, light, extraLight, hairline\n\n\n## Variants\n\n@docs Variant, smallCaps, slashedZero, ligatures, ordinal, tabularNumbers, stackedFractions, diagonalFractions, swash, feature, indexed\n\n\n## Shadows\n\n@docs shadow\n\n","unions":[],"aliases":[{"name":"Font","comment":" ","args":[],"type":"Internal.Font.Font"},{"name":"Variant","comment":" ","args":[],"type":"Internal.Font.Variant"},{"name":"Weight","comment":" ","args":[],"type":"Internal.Font.Weight"}],"values":[{"name":"alignLeft","comment":" Align the font to the left.\n","type":"Ui.Attribute msg"},{"name":"alignRight","comment":" Align the font to the right.\n","type":"Ui.Attribute msg"},{"name":"bold","comment":" ","type":"Ui.Font.Weight"},{"name":"center","comment":" Center align the font.\n","type":"Ui.Attribute msg"},{"name":"color","comment":" ","type":"Ui.Color -> Ui.Attribute msg"},{"name":"diagonalFractions","comment":" Render fractions\n","type":"Ui.Font.Variant"},{"name":"exactWhitespace","comment":" ","type":"Ui.Attribute msg"},{"name":"extraBold","comment":" ","type":"Ui.Font.Weight"},{"name":"extraLight","comment":" ","type":"Ui.Font.Weight"},{"name":"family","comment":"\n\n    import Ui\n    import Ui.Font\n\n    myElement =\n        Ui.el\n            [ Ui.Font.family\n                [ Ui.Font.typeface \"Helvetica\"\n                , Ui.Font.sansSerif\n                ]\n            ]\n            (Ui.text \"Hello!\")\n\n","type":"List.List Ui.Font.Font -> Ui.Attribute msg"},{"name":"feature","comment":" Set a feature by name and whether it should be on or off.\n\nFeature names are four-letter names as defined in the [OpenType specification](https://docs.microsoft.com/en-us/typography/opentype/spec/featurelist).\n\n","type":"String.String -> Basics.Bool -> Ui.Font.Variant"},{"name":"font","comment":"\n\n    Ui.Font.font\n        { name = \"EB Garamond\"\n        , fallback = [ Ui.Font.serif ]\n        , variants = []\n        , weight = Ui.Font.bold\n        , size = 16\n        }\n\n","type":"{ name : String.String, fallback : List.List Ui.Font.Font, variants : List.List Ui.Font.Variant, weight : Ui.Font.Weight, size : Basics.Int } -> Ui.Attribute msg"},{"name":"fontAdjustment","comment":" ","type":"{ family : String.String, offset : Basics.Float, height : Basics.Float } -> Ui.Option"},{"name":"gradient","comment":" ","type":"Ui.Gradient.Gradient -> Ui.Attribute msg"},{"name":"hairline","comment":" ","type":"Ui.Font.Weight"},{"name":"heavy","comment":" ","type":"Ui.Font.Weight"},{"name":"indexed","comment":" A font variant might have multiple versions within the font.\n\nIn these cases we need to specify the index of the version we want.\n\n","type":"String.String -> Basics.Int -> Ui.Font.Variant"},{"name":"italic","comment":" ","type":"Ui.Attribute msg"},{"name":"justify","comment":" ","type":"Ui.Attribute msg"},{"name":"letterSpacing","comment":" In `px`.\n","type":"Basics.Float -> Ui.Attribute msg"},{"name":"ligatures","comment":" ","type":"Ui.Font.Variant"},{"name":"light","comment":" ","type":"Ui.Font.Weight"},{"name":"lineHeight","comment":" ","type":"Basics.Float -> Ui.Attribute msg"},{"name":"medium","comment":" ","type":"Ui.Font.Weight"},{"name":"monospace","comment":" ","type":"Ui.Font.Font"},{"name":"ordinal","comment":" Oridinal markers like `1st` and `2nd` will receive special glyphs.\n","type":"Ui.Font.Variant"},{"name":"regular","comment":" ","type":"Ui.Font.Weight"},{"name":"sansSerif","comment":" ","type":"Ui.Font.Font"},{"name":"semiBold","comment":" ","type":"Ui.Font.Weight"},{"name":"serif","comment":" ","type":"Ui.Font.Font"},{"name":"shadow","comment":" ","type":"{ offset : ( Basics.Float, Basics.Float ), blur : Basics.Float, color : Ui.Color } -> Ui.Attribute msg"},{"name":"size","comment":" Font sizes are always given as `px`.\n","type":"Basics.Int -> Ui.Attribute msg"},{"name":"slashedZero","comment":" Add a slash when rendering `0`\n","type":"Ui.Font.Variant"},{"name":"smallCaps","comment":" [Small caps](https://en.wikipedia.org/wiki/Small_caps) are rendered using uppercase glyphs, but at the size of lowercase glyphs.\n","type":"Ui.Font.Variant"},{"name":"stackedFractions","comment":" Render fractions with the numerator stacked on top of the denominator.\n","type":"Ui.Font.Variant"},{"name":"strike","comment":" ","type":"Ui.Attribute msg"},{"name":"swash","comment":" ","type":"Basics.Int -> Ui.Font.Variant"},{"name":"tabularNumbers","comment":" Number figures will each take up the same space, allowing them to be easily aligned, such as in tables.\n","type":"Ui.Font.Variant"},{"name":"typeface","comment":" ","type":"String.String -> Ui.Font.Font"},{"name":"underline","comment":" ","type":"Ui.Attribute msg"},{"name":"weight","comment":" ","type":"Ui.Font.Weight -> Ui.Attribute msg"},{"name":"wordSpacing","comment":" In `px`.\n","type":"Basics.Float -> Ui.Attribute msg"}],"binops":[]},{"name":"Ui.Gradient","comment":"\n\n@docs Gradient, linear, conic, radial, circle\n\n@docs Step, px, percent\n\n@docs center, top, bottom, left, right, topLeft, topRight, bottomLeft, bottomRight, offset\n\n","unions":[],"aliases":[{"name":"Gradient","comment":" ","args":[],"type":"Internal.Style2.Gradient"},{"name":"Step","comment":" ","args":[],"type":"Internal.Style2.Step"}],"values":[{"name":"bottom","comment":" ","type":"Ui.Gradient.Anchor"},{"name":"bottomLeft","comment":" ","type":"Ui.Gradient.Anchor"},{"name":"bottomRight","comment":" ","type":"Ui.Gradient.Anchor"},{"name":"center","comment":" ","type":"Ui.Gradient.Anchor"},{"name":"circle","comment":" This is _also_ a type of radial gradient, but where the base is circular instead of elliptical.\n","type":"Ui.Gradient.Anchor -> List.List Ui.Gradient.Step -> Ui.Gradient.Gradient"},{"name":"conic","comment":" ","type":"Ui.Gradient.Anchor -> Ui.Angle -> List.List ( Ui.Angle, Ui.Color ) -> Ui.Gradient.Gradient"},{"name":"left","comment":" ","type":"Ui.Gradient.Anchor"},{"name":"linear","comment":" ","type":"Ui.Angle -> List.List Ui.Gradient.Step -> Ui.Gradient.Gradient"},{"name":"offset","comment":" ","type":"Basics.Int -> Basics.Int -> Ui.Gradient.Anchor -> Ui.Gradient.Anchor"},{"name":"percent","comment":" ","type":"Basics.Int -> Ui.Color -> Ui.Gradient.Step"},{"name":"px","comment":" ","type":"Basics.Int -> Ui.Color -> Ui.Gradient.Step"},{"name":"radial","comment":" ","type":"Ui.Gradient.Anchor -> List.List Ui.Gradient.Step -> Ui.Gradient.Gradient"},{"name":"right","comment":" ","type":"Ui.Gradient.Anchor"},{"name":"top","comment":" ","type":"Ui.Gradient.Anchor"},{"name":"topLeft","comment":" ","type":"Ui.Gradient.Anchor"},{"name":"topRight","comment":" ","type":"Ui.Gradient.Anchor"}],"binops":[]},{"name":"Ui.Input","comment":" Input elements have a lot of constraints!\n\nWe want all of our input elements to:\n\n  - _Always be accessible_\n  - _Behave intuitively_\n  - _Be completely restyleable_\n\nWhile these three goals may seem pretty obvious, Html and CSS have made it surprisingly difficult to achieve!\n\nAnd incredibly difficult for developers to remember all the tricks necessary to make things work. If you've every tried to make a `<textarea>` be the height of it's content or restyle a radio button while maintaining accessibility, you may be familiar.\n\nThis module is intended to be accessible by default. You shouldn't have to wade through docs, articles, and books to find out [exactly how accessible your html actually is](https://www.powermapper.com/tests/screen-readers/aria/index.html).\n\n\n# Focus Styling\n\nAll Elements can be styled on focus by using [`Ui.focusStyle`](Element#focusStyle) to set a global focus style or [`Ui.focused`](Element#focused) to set a focus style individually for an Ui.\n\n@docs focusedOnLoad\n\n\n# Checkboxes\n\nA checkbox requires you to store a `Bool` in your model.\n\nThis is also the first input element that has a [`required label`](#Label).\n\n    import Ui exposing (text)\n    import Ui.Input\n\n    type Msg\n        = GuacamoleChecked Bool\n\n    view model =\n        Ui.Input.checkbox []\n            { onChange = GuacamoleChecked\n            , icon = Nothing -- We will get a default icon\n            , checked = model.guacamole\n            , label =\n                Ui.Input.labelRight []\n                    (text \"Do you want Guacamole?\")\n            }\n\n@docs checkbox\n\n\n# Text\n\n@docs text, multiline\n\n@docs Placeholder, placeholder\n\n\n## Text with autofill\n\nIf we want to play nicely with a browser's ability to autofill a form, we need to be able to give it a hint about what we're expecting.\n\nThe following inputs are very similar to `Input.text`, but they give the browser a hint to allow autofill to work correctly.\n\n@docs username, newPassword, currentPassword, email, search, spellChecked\n\n\n# Sliders\n\nA slider is great for choosing between a range of numerical values.\n\n  - **thumb** - The icon that you click and drag to change the value.\n  - **track** - The line behind the thumb denoting where you can slide to.\n\n@docs sliderHorizontal, sliderVertical, Thumb, thumb\n\n\n# Choose One or a 'Radio' Selection\n\n    Input.chooseOne Ui.row\n        [ padding 10\n        , spacing 20\n        ]\n        { onChange = ChooseLunch\n        , selected = Just model.lunch\n        , label = Input.labelAbove [] (text \"Lunch\")\n        , options =\n            [ Input.option Burrito (text \"Burrito\")\n            , Input.option Taco (text \"Taco!\")\n            , Input.option Gyro (text \"Gyro\")\n            ]\n        }\n\n**Note** we're using `Input.option`, which will render a default icon you're probably used to. If you want compeltely custom styling, use `Input.optionWith`!\n\n@docs chooseOne, Option, option, optionWith, OptionState\n\n\n# Labels\n\nEvery input has a required `Label`.\n\n@docs Label, labelAbove, labelBelow, labelLeft, labelRight, labelHidden\n\n\n# Form Elements\n\nYou might be wondering where something like `<form>` is.\n\nWhat I've found is that most people who want `<form>` usually want it for the [implicit submission behavior](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#implicit-submission) or to be clearer, they want to do something when the `Enter` key is pressed.\n\nInstead of implicit submission behavior, [try making an `onEnter` event handler like in this Ellie Example](https://ellie-app.com/5X6jBKtxzdpa1). Then everything is explicit!\n\nAnd no one has to look up obtuse html documentation to understand the behavior of their code :).\n\n\n# File Inputs\n\nPresently, elm-ui does not expose a replacement for `<input type=\"file\">`; in the meantime, an `Input.button` and `elm/file`'s `File.Select` may meet your needs.\n\n\n# Disabling Inputs\n\nYou also might be wondering how to disable an input.\n\nDisabled inputs can be a little problematic for user experience, and doubly so for accessibility. This is because it's now your priority to inform the user _why_ some field is disabled.\n\nIf an input is truly disabled, meaning it's not focusable or doesn't send off a `Msg`, you actually lose your ability to help the user out! For those wary about accessibility [this is a big problem.](https://ux.stackexchange.com/questions/103239/should-disabled-elements-be-focusable-for-accessibility-purposes)\n\nHere are some alternatives to think about that don't involve explicitly disabling an input.\n\n**Disabled Buttons** - Change the `Msg` it fires, the text that is rendered, and optionally set a `Region.description` which will be available to screen readers.\n\n    import Ui.Input as Input\n    import Ui.Region as Region\n\n    myButton ready =\n        if ready then\n            Input.button\n                [ Background.color blue\n                ]\n                { onPress =\n                    Just SaveButtonPressed\n                , label =\n                    text \"Save blog post\"\n                }\n\n        else\n            Input.button\n                [ Background.color grey\n                , Region.description\n                    \"A publish date is required before saving a blogpost.\"\n                ]\n                { onPress =\n                    Just DisabledSaveButtonPressed\n                , label =\n                    text \"Save Blog \"\n                }\n\nConsider showing a hint if `DisabledSaveButtonPressed` is sent.\n\nFor other inputs such as `Input.text`, consider simply rendering it in a normal `paragraph` or `el` if it's not editable.\n\nAlternatively, see if it's reasonable to _not_ display an input if you'd normally disable it. Is there an option where it's only visible when it's editable?\n\n","unions":[{"name":"Label","comment":" ","args":["msg"],"cases":[]},{"name":"Option","comment":" ","args":["value","msg"],"cases":[]},{"name":"OptionState","comment":" ","args":[],"cases":[["Idle",[]],["Focused",[]],["Selected",[]]]},{"name":"Placeholder","comment":" ","args":["id","msg"],"cases":[]},{"name":"Thumb","comment":" ","args":["msg"],"cases":[]}],"aliases":[],"values":[{"name":"checkbox","comment":" ","type":"List.List (Ui.Attribute msg) -> { onChange : Basics.Bool -> msg, icon : Maybe.Maybe (Basics.Bool -> Ui.Element msg), checked : Basics.Bool, label : Ui.Input.Label msg } -> Ui.Element msg"},{"name":"chooseOne","comment":" ","type":"(List.List (Ui.Attribute msg) -> List.List (Ui.Element msg) -> Ui.Element msg) -> List.List (Ui.Attribute msg) -> { onChange : option -> msg, options : List.List (Ui.Input.Option option msg), selected : Maybe.Maybe option, label : Ui.Input.Label msg } -> Ui.Element msg"},{"name":"currentPassword","comment":" ","type":"List.List (Ui.Attribute msg) -> { onChange : String.String -> msg, text : String.String, placeholder : Maybe.Maybe (Ui.Input.Placeholder id msg), label : Ui.Input.Label msg, show : Basics.Bool } -> Ui.Element msg"},{"name":"email","comment":" ","type":"List.List (Ui.Attribute msg) -> { onChange : String.String -> msg, text : String.String, placeholder : Maybe.Maybe (Ui.Input.Placeholder id msg), label : Ui.Input.Label msg } -> Ui.Element msg"},{"name":"focusedOnLoad","comment":" Attach this attribute to any `Input` that you would like to be automatically focused when the page loads.\n\nYou should only have a maximum of one per page.\n\n","type":"Ui.Attribute msg"},{"name":"labelAbove","comment":" ","type":"List.List (Ui.Attribute msg) -> Ui.Element msg -> Ui.Input.Label msg"},{"name":"labelBelow","comment":" ","type":"List.List (Ui.Attribute msg) -> Ui.Element msg -> Ui.Input.Label msg"},{"name":"labelHidden","comment":" Sometimes you may need to have a label which is not visible, but is still accessible to screen readers.\n\nSeriously consider a visible label before using this.\n\nThe situations where a hidden label makes sense:\n\n  - A searchbar with a `search` button right next to it.\n  - A `table` of inputs where the header gives the label.\n\nBasically, a hidden label works when there are other contextual clues that sighted people can pick up on.\n\n","type":"String.String -> Ui.Input.Label msg"},{"name":"labelLeft","comment":" ","type":"List.List (Ui.Attribute msg) -> Ui.Element msg -> Ui.Input.Label msg"},{"name":"labelRight","comment":" ","type":"List.List (Ui.Attribute msg) -> Ui.Element msg -> Ui.Input.Label msg"},{"name":"multiline","comment":" A multiline text input.\n\nBy default it will have a minimum height of one line and resize based on it's contents.\n\n","type":"List.List (Ui.Attribute msg) -> { onChange : String.String -> msg, text : String.String, placeholder : Maybe.Maybe (Ui.Input.Placeholder id msg), label : Ui.Input.Label msg, spellcheck : Basics.Bool } -> Ui.Element msg"},{"name":"newPassword","comment":" A password input that allows the browser to autofill.\n\nIt's `newPassword` instead of just `password` because it gives the browser a hint on what type of password input it is.\n\nA password takes all the arguments a normal `Input.text` would, and also **show**, which will remove the password mask (e.g. `****` vs `pass1234`)\n\n","type":"List.List (Ui.Attribute msg) -> { onChange : String.String -> msg, text : String.String, placeholder : Maybe.Maybe (Ui.Input.Placeholder id msg), label : Ui.Input.Label msg, show : Basics.Bool } -> Ui.Element msg"},{"name":"option","comment":" Add a choice to your chooseOne Element. This will be rendered with a default icon.\n","type":"value -> Ui.Element msg -> Ui.Input.Option value msg"},{"name":"optionWith","comment":" Customize exactly what your chooseOne option should look like in different states.\n","type":"value -> (Ui.Input.OptionState -> Ui.Element msg) -> Ui.Input.Option value msg"},{"name":"placeholder","comment":" ","type":"List.List (Ui.Attribute msg) -> Ui.Element msg -> Ui.Input.Placeholder id msg"},{"name":"search","comment":" ","type":"List.List (Ui.Attribute msg) -> { onChange : String.String -> msg, text : String.String, placeholder : Maybe.Maybe (Ui.Input.Placeholder id msg), label : Ui.Input.Label msg } -> Ui.Element msg"},{"name":"sliderHorizontal","comment":" ","type":"List.List (Ui.Attribute msg) -> { onChange : Basics.Float -> msg, label : Ui.Input.Label msg, min : Basics.Float, max : Basics.Float, value : Basics.Float, thumb : Maybe.Maybe (Ui.Input.Thumb msg), step : Maybe.Maybe Basics.Float } -> Ui.Element msg"},{"name":"sliderVertical","comment":" ","type":"List.List (Ui.Attribute msg) -> { onChange : Basics.Float -> msg, label : Ui.Input.Label msg, min : Basics.Float, max : Basics.Float, value : Basics.Float, thumb : Maybe.Maybe (Ui.Input.Thumb msg), step : Maybe.Maybe Basics.Float } -> Ui.Element msg"},{"name":"spellChecked","comment":" If spell checking is available, this input will be spellchecked.\n","type":"List.List (Ui.Attribute msg) -> { onChange : String.String -> msg, text : String.String, placeholder : Maybe.Maybe (Ui.Input.Placeholder id msg), label : Ui.Input.Label msg } -> Ui.Element msg"},{"name":"text","comment":" ","type":"List.List (Ui.Attribute msg) -> { onChange : String.String -> msg, text : String.String, placeholder : Maybe.Maybe (Ui.Input.Placeholder id msg), label : Ui.Input.Label msg } -> Ui.Element msg"},{"name":"thumb","comment":" ","type":"List.List (Ui.Attribute msg) -> Ui.Input.Thumb msg"},{"name":"username","comment":" ","type":"List.List (Ui.Attribute msg) -> { onChange : String.String -> msg, text : String.String, placeholder : Maybe.Maybe (Ui.Input.Placeholder id msg), label : Ui.Input.Label msg } -> Ui.Element msg"}],"binops":[]},{"name":"Ui.Keyed","comment":" Notes from the `Html.Keyed` on how keyed works:\n\n---\n\nA keyed node helps optimize cases where children are getting added, moved, removed, etc. Common examples include:\n\n  - The user can delete items from a list.\n  - The user can create new items in a list.\n  - You can sort a list based on name or date or whatever.\n\nWhen you use a keyed node, every child is paired with a string identifier. This makes it possible for the underlying diffing algorithm to reuse nodes more efficiently.\n\nThis means if a key is changed between renders, then the diffing step will be skipped and the node will be forced to rerender.\n\n---\n\n@docs el, column, row\n\n","unions":[],"aliases":[],"values":[{"name":"column","comment":" ","type":"List.List (Ui.Attribute msg) -> List.List ( String.String, Ui.Element msg ) -> Ui.Element msg"},{"name":"el","comment":" ","type":"List.List (Ui.Attribute msg) -> ( String.String, Ui.Element msg ) -> Ui.Element msg"},{"name":"row","comment":" ","type":"List.List (Ui.Attribute msg) -> List.List ( String.String, Ui.Element msg ) -> Ui.Element msg"}],"binops":[]},{"name":"Ui.Layout","comment":" The vast majority of layouts should be covered by `Ui.column` and `Ui.row`. Reach for those first before coming here!\n\nHowever, sometimes you might need a bit more nuance.\n\n\n# Advanced Rows and Columns\n\n@docs row, column\n\n@docs centered\n\n@docs AlignX, left, centerY, right\n\n@docs AlignY, top, centerX, bottom\n\n\n# Grid\n\n@docs rowWithConstraints\n\n@docs Width, byContent, px, fill, portion, bounded\n\n","unions":[{"name":"AlignX","comment":" ","args":[],"cases":[]},{"name":"AlignY","comment":" ","args":[],"cases":[]},{"name":"Width","comment":" ","args":[],"cases":[]}],"aliases":[],"values":[{"name":"bottom","comment":" ","type":"Ui.Layout.AlignY"},{"name":"bounded","comment":" ","type":"{ min : Maybe.Maybe Basics.Int, max : Maybe.Maybe Basics.Int } -> Ui.Layout.Width"},{"name":"byContent","comment":" ","type":"Ui.Layout.Width"},{"name":"centerX","comment":" ","type":"Ui.Layout.AlignX"},{"name":"centerY","comment":" ","type":"Ui.Layout.AlignY"},{"name":"centered","comment":" ","type":"( Ui.Layout.AlignX, Ui.Layout.AlignY )"},{"name":"column","comment":" ","type":"{ wrap : Basics.Bool, align : ( Ui.Layout.AlignX, Ui.Layout.AlignY ) } -> List.List (Ui.Attribute msg) -> List.List (Ui.Element msg) -> Ui.Element msg"},{"name":"fill","comment":" ","type":"Ui.Layout.Width"},{"name":"left","comment":" ","type":"Ui.Layout.AlignX"},{"name":"portion","comment":" ","type":"Basics.Int -> Ui.Layout.Width"},{"name":"px","comment":" ","type":"Basics.Int -> Ui.Layout.Width"},{"name":"right","comment":" ","type":"Ui.Layout.AlignX"},{"name":"row","comment":" ","type":"{ wrap : Basics.Bool, align : ( Ui.Layout.AlignX, Ui.Layout.AlignY ) } -> List.List (Ui.Attribute msg) -> List.List (Ui.Element msg) -> Ui.Element msg"},{"name":"rowWithConstraints","comment":" ","type":"List.List Ui.Layout.Width -> List.List (Ui.Attribute msg) -> List.List (Ui.Element msg) -> Ui.Element msg"},{"name":"top","comment":" ","type":"Ui.Layout.AlignY"}],"binops":[]},{"name":"Ui.Lazy","comment":" Same as `Html.lazy`. In case you're unfamiliar, here's a note from the `Html` library!\n\n---\n\nSince all Elm functions are pure we have a guarantee that the same input\nwill always result in the same output. This module gives us tools to be lazy\nabout building `Html` that utilize this fact.\n\nRather than immediately applying functions to their arguments, the `lazy`\nfunctions just bundle the function and arguments up for later. When diffing\nthe old and new virtual DOM, it checks to see if all the arguments are equal\nby reference. If so, it skips calling the function!\n\nThis is a really cheap test and often makes things a lot faster, but definitely\nbenchmark to be sure!\n\n---\n\n@docs lazy, lazy2, lazy3, lazy4, lazy5, lazy6\n\n","unions":[],"aliases":[],"values":[{"name":"lazy","comment":" ","type":"(a -> Ui.Element msg) -> a -> Ui.Element msg"},{"name":"lazy2","comment":" ","type":"(a -> b -> Ui.Element msg) -> a -> b -> Ui.Element msg"},{"name":"lazy3","comment":" ","type":"(a -> b -> c -> Ui.Element msg) -> a -> b -> c -> Ui.Element msg"},{"name":"lazy4","comment":" ","type":"(a -> b -> c -> d -> Ui.Element msg) -> a -> b -> c -> d -> Ui.Element msg"},{"name":"lazy5","comment":" ","type":"(a -> b -> c -> d -> e -> Ui.Element msg) -> a -> b -> c -> d -> e -> Ui.Element msg"},{"name":"lazy6","comment":" ","type":"(a -> b -> c -> d -> e -> f -> Ui.Element msg) -> a -> b -> c -> d -> e -> f -> Ui.Element msg"}],"binops":[]},{"name":"Ui.Responsive","comment":"\n\n@docs Breakpoints, breakpoints\n\n    {-| Translates into\n        0-800       -> Small\n        800-1400   -> Medium\n        1400-2400  -> Large\n        2400-above -> ExtraLarge\n    -}\n    breakpoints : Ui.Responsive.Breakpoints Breakpoints\n    breakpoints =\n        Ui.Responsive.breakpoints Small\n            [ (800, Medium)\n            , (1400, Large)\n            , (2400, ExtraLarge)\n            ]\n\n\n\n\n    el\n        [ Ui.Responsive.visible breakpoints\n            [ Medium ]\n        ]\n        (text \"only visible at medium\")\n\n\n    el\n        [ Ui.Responsive.fontSize breakpoints\n            (\\breakpoint ->\n                case breakpoint of\n                    ExtraLarge ->\n                        Ui.Responsive.value 35\n\n                    Large ->\n                        Ui.Responsive.value 35\n\n                    Medium ->\n                        -- scales from 16 to 35 when the window is in the `Medium` range\n                        Ui.Responsive.fluid 16 35\n\n                    Small ->\n                        Ui.Responsive.value 16\n            )\n        ]\n        (text \"Fluid typography\")\n\n    -- padding\n    el\n        [ Ui.Responsive.padding breakpoints\n            (\\breakpoint ->\n                case breakpoint of\n                    ExtraLarge ->\n                        Ui.Responsive.value 35\n\n                    Large ->\n                        Ui.Responsive.value 35\n\n                    Medium ->\n                        -- scales from 16 to 35 when the window is in the `Medium` range\n                        Ui.Responsive.fluid 16 35\n\n                    Small ->\n                        Ui.Responsive.value 16\n            )\n        ]\n        (text \"Fluid typography\")\n\n@docs visible\n\n@docs Value, value, fluid\n\n@docs rowWhen\n\n@docs font\n\n@docs padding, paddingXY, paddingEach\n\n@docs height, heightMin, heightMax\n\n@docs width, widthMin, widthMax\n\n@docs orAbove, orBelow\n\n","unions":[],"aliases":[{"name":"Breakpoints","comment":" ","args":["label"],"type":"Internal.Model2.Breakpoints label"},{"name":"Value","comment":" ","args":[],"type":"Internal.Model2.Value"}],"values":[{"name":"breakpoints","comment":" ","type":"label -> List.List ( Basics.Int, label ) -> Ui.Responsive.Breakpoints label"},{"name":"fluid","comment":" ","type":"Basics.Int -> Basics.Int -> Ui.Responsive.Value"},{"name":"font","comment":" ","type":"{ name : String.String, fallback : List.List Ui.Font.Font, variants : List.List Ui.Font.Variant, breakpoints : Ui.Responsive.Breakpoints breakpoint, size : breakpoint -> Ui.Responsive.Value, weight : breakpoint -> Ui.Font.Weight } -> Internal.Model2.Attribute msg"},{"name":"height","comment":" ","type":"Ui.Responsive.Breakpoints label -> (label -> Ui.Responsive.Value) -> Internal.Model2.Attribute msg"},{"name":"heightMax","comment":" ","type":"Ui.Responsive.Breakpoints label -> (label -> Ui.Responsive.Value) -> Internal.Model2.Attribute msg"},{"name":"heightMin","comment":" ","type":"Ui.Responsive.Breakpoints label -> (label -> Ui.Responsive.Value) -> Internal.Model2.Attribute msg"},{"name":"orAbove","comment":" ","type":"label -> Ui.Responsive.Breakpoints label -> List.List label"},{"name":"orBelow","comment":" ","type":"label -> Ui.Responsive.Breakpoints label -> List.List label"},{"name":"padding","comment":" ","type":"Ui.Responsive.Breakpoints label -> (label -> Ui.Responsive.Value) -> Internal.Model2.Attribute msg"},{"name":"paddingEach","comment":" ","type":"Ui.Responsive.Breakpoints label -> (label -> { top : Ui.Responsive.Value, right : Ui.Responsive.Value, bottom : Ui.Responsive.Value, left : Ui.Responsive.Value }) -> Internal.Model2.Attribute msg"},{"name":"paddingXY","comment":" ","type":"Ui.Responsive.Breakpoints label -> (label -> { x : Ui.Responsive.Value, y : Ui.Responsive.Value }) -> Internal.Model2.Attribute msg"},{"name":"rowWhen","comment":" Define a layout that is a row when the page in in the specified breakpoints.\n\nOtherwise, it'll render as a `column`.\n\n    Ui.Reponsive.rowWhen breakpoints\n        (Ui.Responsive.orBelow Medium breakpoints)\n        [ Ui.spacing 20\n        ]\n        [ text \"Hello!\"\n        , text \"World!\"\n        ]\n\n","type":"Ui.Responsive.Breakpoints label -> List.List label -> List.List (Internal.Model2.Attribute msg) -> List.List (Internal.Model2.Element msg) -> Internal.Model2.Element msg"},{"name":"value","comment":" ","type":"Basics.Int -> Ui.Responsive.Value"},{"name":"visible","comment":" ","type":"Ui.Responsive.Breakpoints label -> List.List label -> Internal.Model2.Attribute msg"},{"name":"width","comment":" ","type":"Ui.Responsive.Breakpoints label -> (label -> Ui.Responsive.Value) -> Internal.Model2.Attribute msg"},{"name":"widthMax","comment":" ","type":"Ui.Responsive.Breakpoints label -> (label -> Ui.Responsive.Value) -> Internal.Model2.Attribute msg"},{"name":"widthMin","comment":" ","type":"Ui.Responsive.Breakpoints label -> (label -> Ui.Responsive.Value) -> Internal.Model2.Attribute msg"}],"binops":[]},{"name":"Ui.Shadow","comment":"\n\n@docs shadows, inner\n\n@docs font\n\n","unions":[],"aliases":[],"values":[{"name":"font","comment":" ","type":"{ offset : ( Basics.Float, Basics.Float ), blur : Basics.Float, color : Ui.Color } -> Ui.Attribute msg"},{"name":"inner","comment":" ","type":"{ x : Basics.Float, y : Basics.Float, size : Basics.Float, blur : Basics.Float, color : Ui.Color } -> Ui.Attribute msg"},{"name":"shadows","comment":" ","type":"List.List { x : Basics.Float, y : Basics.Float, size : Basics.Float, blur : Basics.Float, color : Ui.Color } -> Ui.Attribute msg"}],"binops":[]},{"name":"Ui.Table","comment":"\n\n    myTable =\n        Ui.Table.columns\n            [ Ui.Table.column\n                { header = Ui.Table.header \"Name\"\n                , view =\n                    \\row ->\n                        Ui.Table.cell []\n                            (Ui.text row.name)\n                }\n            , Ui.Table.column\n                { header = Ui.Table.header \"Occupation\"\n                , view =\n                    \\row ->\n                        Ui.Table.cell []\n                            (Ui.text row.occupation)\n                }\n            ]\n\n    viewTable model =\n        Ui.Table.view [] myTable model.data\n\n\n## Column Configuration\n\n@docs Column, column, Cell, cell\n\n@docs header, withWidth\n\n\n## Table Configuration\n\n@docs view, Config, columns\n\n@docs withRowKey, onRowClick, withScrollable\n\n\n# Advanced Tables with State\n\n@docs viewWithState\n\n@docs columnWithState, withVisibility, withOrder, withSummary\n\n@docs withSort\n\n","unions":[{"name":"Column","comment":" ","args":["state","data","msg"],"cases":[]}],"aliases":[{"name":"Cell","comment":" ","args":["msg"],"type":"{ attrs : List.List (Ui.Attribute msg), child : Ui.Element msg }"},{"name":"Config","comment":" ","args":["state","data","msg"],"type":"{ toKey : data -> String.String, columns : List.List (Ui.Table.Column state data msg), sort : Maybe.Maybe (state -> List.List data -> List.List data), onRowClick : Maybe.Maybe (data -> msg), stickHeader : Basics.Bool, stickRow : data -> Basics.Bool, stickFirstColumn : Basics.Bool, scrollable : Basics.Bool }"}],"values":[{"name":"cell","comment":" ","type":"List.List (Ui.Attribute msg) -> Ui.Element msg -> Ui.Table.Cell msg"},{"name":"column","comment":" ","type":"{ header : Ui.Table.Cell msg, view : data -> Ui.Table.Cell msg } -> Ui.Table.Column state data msg"},{"name":"columnWithState","comment":" ","type":"{ header : state -> Ui.Table.Cell msg, view : Basics.Int -> state -> data -> Ui.Table.Cell msg } -> Ui.Table.Column state data msg"},{"name":"columns","comment":" ","type":"List.List (Ui.Table.Column state data msg) -> Ui.Table.Config state data msg"},{"name":"header","comment":" A simple header with some default styling.\n\nFeel free to make your own!\n\nThis is the same as\n\n    Ui.Table.cell\n        [-- some minimal defaults\n        ]\n        (Ui.text \"Header text\")\n\n","type":"String.String -> Ui.Table.Cell msg"},{"name":"onRowClick","comment":" ","type":"(data -> msg) -> Ui.Table.Config state data msg -> Ui.Table.Config state data msg"},{"name":"view","comment":" ","type":"List.List (Ui.Attribute msg) -> Ui.Table.Config () data msg -> List.List data -> Ui.Element msg"},{"name":"viewWithState","comment":" ","type":"List.List (Ui.Attribute msg) -> Ui.Table.Config state data msg -> state -> List.List data -> Ui.Element msg"},{"name":"withOrder","comment":" ","type":"(state -> Basics.Int) -> Ui.Table.Column state data msg -> Ui.Table.Column state data msg"},{"name":"withRowKey","comment":" Adding a `key` to a row will automatically use `Keyed` under the hood.\n","type":"(data -> String.String) -> Ui.Table.Config state data msg -> Ui.Table.Config state data msg"},{"name":"withScrollable","comment":" ","type":"{ stickFirstColumn : Basics.Bool } -> Ui.Table.Config state data msg -> Ui.Table.Config state data msg"},{"name":"withSort","comment":" ","type":"(state -> List.List data -> List.List data) -> Ui.Table.Config state data msg -> Ui.Table.Config state data msg"},{"name":"withSummary","comment":" ","type":"(state -> List.List data -> Ui.Table.Cell msg) -> Ui.Table.Column state data msg -> Ui.Table.Column state data msg"},{"name":"withVisibility","comment":" ","type":"(state -> Basics.Bool) -> Ui.Table.Column state data msg -> Ui.Table.Column state data msg"},{"name":"withWidth","comment":" ","type":"{ fill : Basics.Bool, min : Maybe.Maybe Basics.Int, max : Maybe.Maybe Basics.Int } -> Ui.Table.Column state data msg -> Ui.Table.Column state data msg"}],"binops":[]}]